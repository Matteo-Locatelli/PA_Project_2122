/*
 * Gestore.cpp
 *
 *  Created on: 17 ago 2022
 *      Author: matte
 */

#include <iostream>
#include <vector>
#include <string>
#include <memory>

#include "Gestore.h"

#include "../menu/Menu.h"
#include "../menu/MenuCompleto.h"
#include "../menu/MenuPrimo.h"
#include "../menu/MenuSecondo.h"

#include "Stampe.h"

using namespace std;

Gestore::Gestore(){
	init();
}

void Gestore::init(){

	/** SE SI USANO 2 LISTE
	//init studenti
	lista_studenti.push_back(make_shared<Studente>("Mario", "Rossi"));
	lista_studenti.push_back(make_shared<Studente>("Giuseppe", "Bianchi"));
	lista_studenti.push_back(make_shared<Studente>("Matteo", "Locatelli"));

	//init professori
	professore_ref t1(new Professore("Angelo", "Gargantini"));
	lista_professori.push_back(t1);
	lista_professori.push_back(make_shared<Professore>("Pluto", "Plutone"));
	lista_professori.push_back(make_shared<Professore>("Pippo", "Plutone"));
	 */

	// init con 1 sola lista
	studente_ref s1(new Studente("Matteo", "Locatelli"));
	lista_utenti.push_back(s1);
	lista_utenti.push_back(make_shared<Studente>("Mario", "Rossi"));
	lista_utenti.push_back(make_shared<Studente>("Giuseppe", "Bianchi"));
	professore_ref t1(new Professore("Angelo", "Gargantini"));
	lista_utenti.push_back(t1);
	lista_utenti.push_back(make_shared<Professore>("Pluto", "Plutone"));
	lista_utenti.push_back(make_shared<Professore>("Pippo", "Plutone"));

	//init menu con time(0) un long int e sommo secondi per cambiare data
	lista_menu_primo.push_back(make_shared<MenuPrimo>(lista_utenti.at(0), MenuPrimo::get_prezzo(), time(0),
			Menu::get_orario_from_int(0), MenuPrimo::get_primo_from_int(0),
			MenuPrimo::get_dessert_from_int(0), MenuPrimo::get_caffe_from_int(0)));
	lista_menu_secondo.push_back(make_shared<MenuSecondo>(lista_utenti.at(1), MenuSecondo::get_prezzo(), time(0)+100000,
			Menu::get_orario_from_int(0), MenuSecondo::get_secondo_from_int(0),
			MenuSecondo::get_contorno_from_int(0), MenuSecondo::get_caffe_from_int(0)));
	lista_menu_completo.push_back(make_shared<MenuCompleto>(lista_utenti.at(2), MenuCompleto::get_prezzo(), time(0)+200000,
			Menu::get_orario_from_int(1), MenuPrimo::get_primo_from_int(1), MenuSecondo::get_secondo_from_int(1),
			MenuSecondo::get_contorno_from_int(1), MenuPrimo::get_dessert_from_int(1), MenuPrimo::get_caffe_from_int(1)));
}


/*
 * Metodi per creare nuovi menu
 */

void Gestore::nuovo_menu(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Sei nella sezione per scegliere il tuo menu! " << endl;
	cout << "Premi invio per procedere. " << endl;
	cin.ignore();
	string line;
	int scelta = -1;
	while(scelta == -1){
		cout << "Scegli il tipo di menu" << endl;
		cout << "0 - Menu primo" << endl;
		cout << "1 - Menu secondo" << endl;
		cout << "2 - Menu completo" << endl;
		cout << "3 - Annulla scelta" << endl;
		getline(cin, line);
		if(line == "\0"){
			scelta = -1;
			continue;
		}
		scelta = stoi(line);
		switch(scelta){
		case 0:
			nuovo_menu_primo();
			break;
		case 1:
			nuovo_menu_secondo();
			break;
		case 2:
			nuovo_menu_completo();
			break;
		case 3:
			return;
		default:
			cout << "Scelta non valida." << endl;
			scelta = -1;
			break;
		}
	}
}
/*
menu_ref Gestore::crea_menu(){
	// selezione dell'utente
	utente_ref utente_scelto = scelta_utente();
	if (utente_scelto == nullptr) {
		return;
	}
	// selezione del menu
	int p = scelta_menu();	-> metodo che mostra in console 3 opzioni e restituisce il prezzo data l'opzione scelta (p, s, c).
	if(p==0) {
		return;
	}
	// selezione data
	time_t data_scelta = scelta_data();
	if (data_scelta == 0) {
		return;
	}
	// selezione dell'orario
	int o = scelta_orario();
	if (o == -1){
		return;
	}
	menu_ref menu_creato = make_shared<Menu>(utente_scelto, prezzo, data_scelta, orario_scelto);
	return menu_creato;
}
 */

void Gestore::nuovo_menu_primo(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Selezione di un nuovo menu primo " << endl;
	// selezione dell'utente
	utente_ref utente_scelto = scelta_utente();
	if (utente_scelto == nullptr) {
		return;
	}
	// selezione data
	time_t data_scelta = scelta_data();
	if (data_scelta == 0) {
		return;
	}
	// selezione dell'orario
	int o = scelta_orario();
	if (o == -1){
		return;
	}
	// selezione primo
	int p = scelta_primo();
	if (p == -1){
		return;
	}
	// selezione dessert
	int d = scelta_dessert();
	if (d == -1){
		return;
	}
	// selezione caffe
	int c = scelta_caffe();
	if (c == -1){
		return;
	}
	cout << "Menu primo creato " << endl;
	menu_primo_ref menu_primo_scelto = make_shared<MenuPrimo>(utente_scelto, MenuPrimo::get_prezzo(), data_scelta,
			Menu::get_orario_from_int(o), MenuPrimo::get_primo_from_int(p),
			MenuPrimo::get_dessert_from_int(d), MenuPrimo::get_caffe_from_int(c));
	lista_menu_primo.push_back(menu_primo_scelto);
}

void Gestore::nuovo_menu_secondo(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Selezione di un nuovo menu secondo " << endl;
	utente_ref utente_scelto = scelta_utente();	// selezione dell'utente
	if (utente_scelto == nullptr) {
		return;
	}
	// selezione data
	time_t data_scelta = scelta_data();
	if (data_scelta == 0) {
		return;
	}
	// selezione dell'orario
	int o = scelta_orario();
	if (o == -1){
		return;
	}
	// selezione secondo
	int s = scelta_secondo();
	if (s == -1){
		return;
	}
	// selezione dessert
	int ct = scelta_contorno();
	if (ct == -1){
		return;
	}
	// selezione caffe
	int c = scelta_caffe();
	if (c == -1){
		return;
	}
	cout << "Menu secondo creato " << endl;
	menu_secondo_ref menu_secondo_scelto = make_shared<MenuSecondo>(utente_scelto, MenuSecondo::get_prezzo(), data_scelta,
			Menu::get_orario_from_int(o), MenuSecondo::get_secondo_from_int(s),
			MenuSecondo::get_contorno_from_int(ct), MenuSecondo::get_caffe_from_int(c));
	lista_menu_secondo.push_back(menu_secondo_scelto);
}

void Gestore::nuovo_menu_completo(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Selezione di un nuovo menu completo  " << endl;
	utente_ref utente_scelto = scelta_utente();	// selezione dell'utente
	if (utente_scelto == nullptr) {
		return;
	}
	// selezione data
	time_t data_scelta = scelta_data();
	if (data_scelta == 0) {
		return;
	}
	// selezione dell'orario
	int o = scelta_orario();
	if (o == -1){
		return;
	}
	// selezione primo
	int p = scelta_primo();
	if (p == -1){
		return;
	}
	// selezione secondo
	int s = scelta_secondo();
	if (s == -1){
		return;
	}
	// selezione contorno
	int ct = scelta_contorno();
	if (ct == -1){
		return;
	}
	// selezione dessert
	int d = scelta_dessert();
	if (d == -1){
		return;
	}
	// selezione caffe
	int c = scelta_caffe();
	if (c == -1){
		return;
	}
	cout << "Menu completo creato " << endl;
	menu_completo_ref menu_completo_scelto = make_shared<MenuCompleto>(utente_scelto, MenuCompleto::get_prezzo(),
			data_scelta, Menu::get_orario_from_int(o), MenuPrimo::get_primo_from_int(p), MenuSecondo::get_secondo_from_int(s),
			MenuSecondo::get_contorno_from_int(ct), MenuPrimo::get_dessert_from_int(d), MenuPrimo::get_caffe_from_int(c));
	lista_menu_completo.push_back(menu_completo_scelto);
}

utente_ref Gestore::scelta_utente(){
	int scelta = -2;
	string line;
	cout << "Sei nella sezione di scelta di un utente ('!' per terminare): " << endl;
	cout << "Seleziona il numero dell'utente dalla lista oppure insersci '-1' per crearne uno nuovo: " << endl;
	int index = 0;
	for(auto& el: lista_utenti){
		cout << index << " - " << el->get_string();
		index++;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return nullptr;
	}
	scelta = stoi(line);
	utente_ref utente_scelto;
	if(scelta == -1){
		utente_scelto = registra_nuovo_utente();
	}
	else if (scelta < index && scelta >= 0){
		utente_scelto = lista_utenti.at(scelta);
	} else {
		stampa_errore();
		return nullptr;
	}
	return utente_scelto;
}

time_t Gestore::scelta_data(){	// return 0 per errore
	string line;
	int year, month, day;

	time_t now = time(0);
	tm* current_local_time = localtime(&now);
	cout << "Inserisci anno: " << endl;
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return 0;
	}
	year = stoi(line);
	if (year < current_local_time->tm_year + 1900) {
		stampa_errore_data_passata();
		return 0;
	}
	bool stesso_anno = year == current_local_time->tm_year + 1900;

	cout << "Inserisci mese: " << endl;
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return 0;
	}
	month = stoi(line);
	if (month< 1 || month>12){
		stampa_errore_inserimento_data();
		return 0;
	}
	if (month < current_local_time->tm_mon + 1 && stesso_anno) {
		stampa_errore_data_passata();
		return 0;
	}
	bool stesso_mese = month == current_local_time->tm_mon + 1;

	cout << "Inserisci giorno: " << endl;
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return 0;
	}
	day = stoi(line);
	if (day< 1 || day>31){
		stampa_errore_inserimento_data();
		return 0;
	}
	if (day <= current_local_time->tm_mday && stesso_mese && stesso_anno) {
		stampa_errore_data_passata();
		return 0;
	}

	time_t data;
	time(&data);
	tm* local_data_time = localtime(&data);
	local_data_time->tm_year = year - 1900;
	local_data_time->tm_mon = month - 1;
	local_data_time->tm_mday = day;
	local_data_time->tm_hour = 12;
	local_data_time->tm_min = 0;
	local_data_time->tm_sec = 0;
	data = mktime(local_data_time);

	return data;
}

int Gestore::scelta_orario(){
	string line;
	int orario_scelto = -1;
	cout << "Seleziona l'orario del tuo pasto: " << endl;
	for (unsigned int index = 0; index < 2; index++){
		cout << index << " - " << Menu::get_string_orario_from_enum( Menu::get_orario_from_int(index) ) << endl;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return -1;
	}
	orario_scelto = stoi(line);
	if (orario_scelto < 0 || orario_scelto > 1) {
		stampa_errore();
		return -1;
	}
	return orario_scelto;
}

int Gestore::scelta_primo(){
	string line;
	int primo_scelto = -1;
	cout << "Seleziona il primo: " << endl;
	for (unsigned int index = 0; index < 4; index++){
		cout << index << " - " << MenuPrimo::get_string_primo_from_enum( MenuPrimo::get_primo_from_int(index) ) << endl;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return -1;
	}
	primo_scelto = stoi(line);
	if (primo_scelto < 0 || primo_scelto > 3) {
		stampa_errore();
		return -1;
	}
	return primo_scelto;
}

int Gestore::scelta_secondo(){
	string line;
	int secondo_scelto = -1;
	cout << "Seleziona il secondo: " << endl;
	for (unsigned int index = 0; index < 3; index++){
		cout << index << " - " << MenuSecondo::get_string_secondo_from_enum( MenuSecondo::get_secondo_from_int(index) ) << endl;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return -1;
	}
	secondo_scelto = stoi(line);
	if (secondo_scelto < 0 || secondo_scelto > 2) {
		stampa_errore();
		return -1;
	}
	return secondo_scelto;
}

int Gestore::scelta_contorno(){
	string line;
	int contorno_scelto = -1;
	cout << "Seleziona il contorno: " << endl;
	for (unsigned int index = 0; index < 3; index++){
		cout << index << " - " << MenuSecondo::get_string_contorno_from_enum( MenuSecondo::get_contorno_from_int(index) ) << endl;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return -1;
	}
	contorno_scelto = stoi(line);
	if (contorno_scelto < 0 || contorno_scelto > 2) {
		stampa_errore();
		return -1;
	}
	return contorno_scelto;
}

int Gestore::scelta_dessert(){
	string line;
	int dessert_scelto = -1;
	cout << "Seleziona il dessert: " << endl;
	for (unsigned int index = 0; index < 3; index++){
		cout << index << " - " << MenuPrimo::get_string_dessert_from_enum( MenuPrimo::get_dessert_from_int(index) ) << endl;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return -1;
	}
	dessert_scelto = stoi(line);
	if (dessert_scelto < 0 || dessert_scelto > 2) {
		stampa_errore();
		return -1;
	}
	return dessert_scelto;
}

int Gestore::scelta_caffe(){
	string line;
	int caffe_scelto = -1;
	cout << "Seleziona il caffe: " << endl;
	for (unsigned int index = 0; index < 2; index++){
		cout << index << " - " << MenuPrimo::get_string_caffe_from_enum( MenuPrimo::get_caffe_from_int(index) ) << endl;
	}
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return -1;
	}
	caffe_scelto = stoi(line);
	if (caffe_scelto < 0 || caffe_scelto > 1) {
		stampa_errore();
		return -1;
	}
	return caffe_scelto;
}


/*
 * Metodo per la creazione di nuovi studenti e professori
 */

utente_ref Gestore::registra_nuovo_utente(){
	string nome, cognome, line;
	int ruolo = -1;
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Sei nella sezione di registrazione di un nuovo utente: " << endl;
	cout << "Inserisci il nome dell'utente: " << endl;
	getline(cin, nome);
	cout << "Inserisci il cognome dell'utente: " << endl;
	getline(cin, cognome);
	utente_ref utente_creato;
	cout << "Selezionare il ruolo dell'utente: " << endl;
	cout << " 0 - Studente " << endl;
	cout << " 1 - Professore " << endl;
	cout << " ! - Reset " << endl;
	getline(cin, line);
	if (line == "!" || line == "\0") {
		return nullptr;
	}
	ruolo = stoi(line);
	if (ruolo==0){
		utente_creato = make_shared<Studente>(nome, cognome);
	} else if (ruolo == 1){
		utente_creato = make_shared<Professore>(nome, cognome);
	} else {
		return nullptr;
	}
	lista_utenti.push_back(utente_creato);
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	return utente_creato;
}

/* SE 2 LISTE
studente_ref Gestore::registra_nuovo_studente(){
	string nome, cognome;
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Sei nella sezione di registrazione di un nuovo studente: " << endl;
	cout << "Inserisci il nome dello studente: " << endl;
	getline(cin, nome);
	cout << "Inserisci il cognome dello studente: " << endl;
	getline(cin, cognome);
	studente_ref studente_creato = make_shared<Studente>(nome, cognome);

	//lista_studenti.push_back(studente_creato); se 2 liste

	lista_utenti.push_back(studente_creato);
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	return studente_creato;
}

professore_ref Gestore::registra_nuovo_professore(){
	string nome, cognome;
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Sei nella sezione di registrazione di un nuovo professore: " << endl;
	cout << "Inserisci il nome del professore: " << endl;
	getline(cin, nome);
	cout << "Inserisci il cognome del professore: " << endl;
	getline(cin, cognome);
	professore_ref professore_creato = make_shared<Professore>(nome, cognome);

	// lista_professori.push_back(professore_creato); se 2 liste

	lista_utenti.push_back(professore_creato);
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	return professore_creato;
}
 */


/*
 * Metodi per la stampa delle liste di menu e dei relativi utenti
 */

void Gestore::stampa_lista_menu(){
	stampa_lista_menu_primo();
	stampa_lista_menu_secondo();
	stampa_lista_menu_completo();
}

void Gestore::stampa_lista_menu_primo(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Lista menu primo: " << endl;
	for(auto& el: lista_menu_primo){
		stampa_menu(el);
	}
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
}

void Gestore::stampa_lista_menu_secondo(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Lista menu secondo: " << endl;
	for(auto& el: lista_menu_secondo){
		stampa_menu(el);
	}
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
}

void Gestore::stampa_lista_menu_completo(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Lista menu completo: " << endl;
	for(auto& el: lista_menu_completo){
		stampa_menu(el);
	}
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
}


/*
 * Metodi per la stampa dei vari menu e delle relative opzioni
 */

void Gestore::stampa_opzioni_menu(){
	stampa_scelte_menu();
}

void Gestore::stampa_opzioni_menu_primo(){
	stampa_scelte_menu_primo();
}

void Gestore::stampa_opzioni_menu_secondo(){
	stampa_scelte_menu_secondo();
}

void Gestore::stampa_opzioni_menu_completo(){
	stampa_scelte_menu_completo();
}


/*
 * Metodi per stampare la lista di studenti e professori registrati
 */

void Gestore::stampa_utenti(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Lista utenti: " << endl;
	for(auto& el: lista_utenti){
		stampa_utente(el);
	}
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;

	/**	SE 2 LISTE
	 	stampa_studenti();
		stampa_professori();

	 */

}

/* STAMPE SE 2 LISTE

void Gestore::stampa_studenti(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Lista studenti: " << endl;
	for(auto& el: lista_studenti){
		stampa_utente(el);
	}
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
}

void Gestore::stampa_professori(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Lista professori: " << endl;
	for(auto& el: lista_professori){
		stampa_utente(el);
	}
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
}
 */


/*
 * Distruttore
 */

Gestore::~Gestore(){
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
	cout << "Elimino gestore" << endl;
	cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " << endl;
}
